# AWS Secrets Manager Integration with Kubernetes
# Requires: AWS Secrets Store CSI Driver

apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: app-secrets
  namespace: thrive-app
spec:
  provider: aws
  parameters:
    objects: |
      - objectName: "thrive-app-secrets"
        objectType: "secretsmanager"
        jmesPath:
          - path: "database_url"
            objectAlias: "database_url"
          - path: "api_key"
            objectAlias: "api_key"
          - path: "jwt_secret"
            objectAlias: "jwt_secret"
  secretObjects:
  - secretName: app-secrets
    type: Opaque
    data:
    - objectName: "database_url"
      key: "database_url"
    - objectName: "api_key"
      key: "api_key"
    - objectName: "jwt_secret"
      key: "jwt_secret"
---
# Service Account with IRSA for Secrets Manager access
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hello-world-sa
  namespace: thrive-app
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/thrive-secrets-manager-role
---
# Updated Deployment to use secrets
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hello-world-with-secrets
  namespace: thrive-app
  labels:
    app: hello-world
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: hello-world
  template:
    metadata:
      labels:
        app: hello-world
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: hello-world-sa
      containers:
      - name: hello-world
        image: nginx:latest  # This will be replaced by CI/CD
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: APP_VERSION
          value: "1.0.0"
        # Environment variables from secrets
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: database_url
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: api_key
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: jwt_secret
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
        # Mount secrets from AWS Secrets Manager
        volumeMounts:
        - name: secrets-store
          mountPath: "/mnt/secrets-store"
          readOnly: true
      volumes:
      - name: secrets-store
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: "app-secrets"
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
