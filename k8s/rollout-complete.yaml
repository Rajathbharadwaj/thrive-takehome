# Complete Argo Rollouts setup with services
---
apiVersion: v1
kind: Service
metadata:
  name: hello-world-service
  namespace: thrive-app
  labels:
    app: hello-world
spec:
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: hello-world
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: hello-world-service-canary
  namespace: thrive-app
  labels:
    app: hello-world
spec:
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: hello-world
  type: ClusterIP

---
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: hello-world-rollout
  namespace: thrive-app
  labels:
    app: hello-world
spec:
  replicas: 2
  strategy:
    canary:
      canaryService: hello-world-service-canary
      stableService: hello-world-service
      steps:
      - setWeight: 25  # Start with 25% traffic to new version
      - pause: 
          duration: 30s  # Wait 30 seconds
      - setWeight: 50  # Increase to 50% traffic
      - pause: 
          duration: 60s  # Wait 1 minute
      - setWeight: 75  # Increase to 75% traffic
      - pause: 
          duration: 30s  # Wait 30 seconds
      # If no issues, promote to 100%
      
      # Traffic routing (using ALB)
      trafficRouting:
        alb:
          ingress: hello-world-ingress
          servicePort: 80
  
  selector:
    matchLabels:
      app: hello-world
  
  template:
    metadata:
      labels:
        app: hello-world
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: hello-world
        image: 866567874511.dkr.ecr.us-east-1.amazonaws.com/thrive-hello-world:latest
        ports:
        - containerPort: 3000
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
