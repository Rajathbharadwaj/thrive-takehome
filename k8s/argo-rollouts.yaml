# Argo Rollouts - Canary Deployment Strategy
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: hello-world-rollout
  namespace: thrive-app
  labels:
    app: hello-world
spec:
  replicas: 4
  strategy:
    canary:
      # Canary steps
      steps:
      - setWeight: 25  # Start with 25% traffic to new version
      - pause: 
          duration: 30s  # Wait 30 seconds
      - setWeight: 50  # Increase to 50% traffic
      - pause: 
          duration: 60s  # Wait 1 minute
      - setWeight: 75  # Increase to 75% traffic
      - pause: 
          duration: 30s  # Wait 30 seconds
      # If no issues, promote to 100%
      
      # Traffic routing (using ALB)
      trafficRouting:
        alb:
          ingress: hello-world-ingress
          servicePort: 80
          
      # Analysis to automatically promote or rollback
      analysis:
        templates:
        - templateName: success-rate
        args:
        - name: service-name
          value: hello-world-rollout-canary
        - name: namespace
          value: thrive-app
        
      # Anti-affinity for pod distribution
      antiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution: {}
        preferredDuringSchedulingIgnoredDuringExecution:
          weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - hello-world
            topologyKey: kubernetes.io/hostname
            
  selector:
    matchLabels:
      app: hello-world
  template:
    metadata:
      labels:
        app: hello-world
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: hello-world
        image: nginx:latest  # This will be replaced by CI/CD
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: APP_VERSION
          value: "1.0.0"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      restartPolicy: Always
---
# AnalysisTemplate for automated rollback decisions
apiVersion: argoproj.io/v1alpha1
kind: AnalysisTemplate
metadata:
  name: success-rate
  namespace: thrive-app
spec:
  args:
  - name: service-name
  - name: namespace
  metrics:
  - name: success-rate
    interval: 30s
    successCondition: result[0] >= 0.95  # 95% success rate required
    failureLimit: 3
    provider:
      prometheus:
        address: http://prometheus-service.monitoring.svc.cluster.local:9090
        query: |
          sum(irate(http_requests_total{service="{{args.service-name}}",namespace="{{args.namespace}}",status_code!~"5.."}[2m])) /
          sum(irate(http_requests_total{service="{{args.service-name}}",namespace="{{args.namespace}}"}[2m]))
  - name: error-rate
    interval: 30s
    successCondition: result[0] <= 0.05  # 5% error rate maximum
    failureLimit: 3
    provider:
      prometheus:
        address: http://prometheus-service.monitoring.svc.cluster.local:9090
        query: |
          sum(irate(http_requests_total{service="{{args.service-name}}",namespace="{{args.namespace}}",status_code=~"5.."}[2m])) /
          sum(irate(http_requests_total{service="{{args.service-name}}",namespace="{{args.namespace}}"}[2m]))
